# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /home/kali/living-threat-models/demo
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 126
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 28
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 3000 
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12 
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "#000000"
    foreground: "#ffffff"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 343
    content: "\e[?2004hkali@kali:~/living-threat-models/demo$ "
  - delay: 673
    content: .
  - delay: 215
    content: /
  - delay: 152
    content: d
  - delay: 168
    content: e
  - delay: 45
    content: m
  - delay: 162
    content: o
  - delay: 95
    content: '.sh '
  - delay: 421
    content: "\r\n\e[?2004l\r----------------------------------------\r\n[THE GOOD]\r\n\r\n$ python ../auditor.py ../models/good.json\r\n\r\n"
  - delay: 18
    content: "[]\r\n"
  - delay: 3007
    content: "----------------------------------------\r\n[THE BAD]\r\n\r\n$ python ../auditor.py ../models/bad.json\r\n\r\n"
  - delay: 20
    content: "[{'CIA': 'C',\r\n  'Category': 'Vulnerability',\r\n  'Description': 'Database that stores the customer data',\r\n  'Issue': 'No Encryption',\r\n  'Severity': 'Critical',\r\n  'Type': 'Store'},\r\n {'CIA': '',\r\n  'Category': 'Vulnerability',\r\n  'Description': 'Network connection between client and web server',\r\n  'Issue': 'No Encryption',\r\n  'Protocol': 'HTTP',\r\n  'Severity': 'Critical',\r\n  'Type': 'Flow'},\r\n {'CIA': '',\r\n  'Category': 'Quality',\r\n  'Description': 'Network connection between database and web server',\r\n  'Issue': 'Missing Label',\r\n  'Severity': 'Low',\r\n  'Type': 'Flow'}]\r\n"
  - delay: 5007
    content: "----------------------------------------\r\n[THE UGLY]\r\n\r\n$ python ../auditor.py ../models/ugly.json\r\n\r\n"
  - delay: 19
    content: "Traceback (most recent call last):\r\n  File \"/home/kali/living-threat-models/demo/../auditor.py\", line 43, in <module>\r\n    pprint.pprint(audit(parse(sys.argv[1])))\r\n  File \"/home/kali/living-threat-models/parser.py\", line 9, in parse\r\n    for el in json.load(fd)[\"detail\"][\"diagrams\"][0][\"diagramJson\"][\"cells\"]:\r\n  File \"/usr/lib/python3.9/json/__init__.py\", line 293, in load\r\n    return loads(fp.read(),\r\n  File \"/usr/lib/python3.9/json/__init__.py\", line 346, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib/python3.9/json/decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/usr/lib/python3.9/json/decoder.py\", line 355, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n----------------------------------------\r\n\e[?2004hkali@kali:~/living-threat-models/demo$ "
  - delay: 875
    content: "\e[?2004l\r\r\nlogout\r\n"
